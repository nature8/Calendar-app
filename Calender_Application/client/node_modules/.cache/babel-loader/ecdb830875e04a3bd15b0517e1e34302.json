{"ast":null,"code":"import { event } from \"../Axios/event\";\nimport * as moment from \"moment\";\nimport { addError, removeError } from \"./errorsAction\";\nimport { useNavigate } from \"react-router-dom\";\nexport const showEvent = event => {\n  console.log(\"event to be shown on the modal: \", event);\n  return {\n    type: \"SHOW_EVENT\",\n    payload: event\n  };\n};\nexport const showEvents = events => {\n  return {\n    type: \"SHOW_EVENTS\",\n    payload: events\n  };\n};\nexport const ShowEventApi = id => async dispatch => {\n  //i won't get the event from redux store as it is safer to\n  //keep updated with db.\n  const result = await event.get(`/${id}/show`);\n\n  try {\n    const {\n      title,\n      _id,\n      start,\n      end,\n      describe\n    } = await result.data;\n    const convertedEvent = {\n      title,\n      describe,\n      id: _id,\n      start: moment(start).format(\"ddd DD MMM YY LT\"),\n      end: moment(end).format(\"ddd DD MMM YY LT\")\n    };\n    await dispatch(showEvent(convertedEvent));\n  } catch (err) {\n    const error = await err.data.message;\n    return error;\n  }\n};\nexport const ShowEventsApi = () => async dispatch => {\n  console.log(\"started fetching the api\"); //i won't get the event from redux store as it is safer to\n  //keep updated with db.\n\n  const result = await event.get(\"/\");\n\n  try {\n    const convertedDates = await result.data.map(event => {\n      return {\n        title: event.title,\n        start: new Date(event.start),\n        end: new Date(event.end),\n        id: event._id,\n        describe: event.describe\n      };\n    });\n    await dispatch(showEvents(convertedDates));\n  } catch (err) {\n    const error = await err.data.message;\n    return error;\n  }\n};\nexport const deleteEvent = id => {\n  return {\n    type: \"DELETE_EVENT\",\n    payload: id\n  };\n};\nexport const deleteEventApi = id => async dispatch => {\n  const result = await event.delete(`/${id}/delete`);\n\n  try {\n    const deleted = await result.data;\n    await dispatch(deleteEvent(id));\n    return {\n      deleted\n    };\n  } catch (err) {\n    const message = await result.data.message;\n    console.log(message);\n    return {\n      message\n    };\n  }\n};\n\nconst addEvent = newEvent => {\n  return {\n    type: \"ADD_EVENT\",\n    payload: newEvent\n  };\n};\n\nexport const addEventApi = values => async dispatch => {\n  const result = await event.post(\"/\", {\n    title: values.title,\n    start: values.start,\n    end: values.end,\n    describe: values.describe\n  }).then(res => {\n    if (res && res.data) {\n      console.log(\"event from the api going to the reducer: \", res.data);\n      dispatch(addEvent(res.data));\n      dispatch(removeError());\n      return \"success\";\n    }\n  }).catch(res => {\n    console.log(\"catch response, \", res);\n\n    if (res.response.data) {\n      console.log(res.response.data);\n      dispatch(addError(res.response.data));\n    }\n  });\n};\n\nconst updateEvent = updatedEvent => {\n  return {\n    type: \"UPDATE_EVENT\",\n    payload: updatedEvent\n  };\n};\n\nexport const updateEventApi = (values, id) => async dispatch => {\n  try {\n    const result = await event.put(`/${id}/update`, {\n      title: values.title,\n      start: values.start,\n      end: values.end,\n      describe: values.describe\n    });\n    console.log(result);\n    const response = result.data;\n    dispatch(removeError());\n    return \"response was successful\";\n  } catch (err) {\n    console.log(err);\n    dispatch(addError(err.response.data));\n  }\n};","map":{"version":3,"names":["event","moment","addError","removeError","useNavigate","showEvent","console","log","type","payload","showEvents","events","ShowEventApi","id","dispatch","result","get","title","_id","start","end","describe","data","convertedEvent","format","err","error","message","ShowEventsApi","convertedDates","map","Date","deleteEvent","deleteEventApi","delete","deleted","addEvent","newEvent","addEventApi","values","post","then","res","catch","response","updateEvent","updatedEvent","updateEventApi","put"],"sources":["D:/New Volume2/New folder/Calender_Application/client/src/Redux/actions/eventsActions.js"],"sourcesContent":["\nimport { event } from \"../Axios/event\"\nimport * as moment from \"moment\"\nimport { addError, removeError } from \"./errorsAction\"\nimport { useNavigate } from \"react-router-dom\"\nexport const showEvent = (event)=>{\n    console.log(\"event to be shown on the modal: \", event)\n    return{\n        type: \"SHOW_EVENT\",\n        payload: event\n    }\n}\n\nexport const showEvents = (events)=>{\n    \n    return{\n        type: \"SHOW_EVENTS\",\n        payload: events\n    }\n}\n\nexport const ShowEventApi = id => async dispatch => {\n     \n    //i won't get the event from redux store as it is safer to\n    //keep updated with db.\n    const result = await event.get(`/${id}/show`);\n\n    try{\n        const {title, _id, start, end, describe} = await result.data;\n        const convertedEvent = {\n            title,\n            describe,\n            id: _id,\n            start: moment(start).format(\"ddd DD MMM YY LT\"),\n            end: moment(end).format(\"ddd DD MMM YY LT\")\n        }\n        await dispatch(showEvent(convertedEvent))\n    }catch(err){\n         const error =await err.data.message;\n         return error\n    }\n}\n\nexport const ShowEventsApi = () => async dispatch => {\n     console.log(\"started fetching the api\")\n    //i won't get the event from redux store as it is safer to\n    //keep updated with db.\n    const result = await event.get(\"/\");\n\n    try{\n        const convertedDates = await result.data.map(event=>{\n            return{\n              title: event.title,\n              start: new Date(event.start) ,\n              end: new Date(event.end) ,\n              id: event._id,\n              describe: event.describe\n            }\n          })\n        await dispatch(showEvents(convertedDates))\n    }catch(err){\n         const error =await err.data.message;\n         return error\n    }\n}\n\n\nexport const deleteEvent = (id)=>{\n   return {\n       type: \"DELETE_EVENT\",\n       payload: id\n   }\n}\n\nexport const deleteEventApi = (id) =>  async dispatch=> {\n    const result = await event.delete(`/${id}/delete`)\n\n    try {\n        const deleted = await result.data;\n        await dispatch(deleteEvent(id))\n        return {deleted}\n    }catch(err){\n        const message = await result.data.message;\n        console.log(message)\n        return {message}\n    }\n}\n\n\n\nconst addEvent = (newEvent)=>{\n    return{\n      type: \"ADD_EVENT\",\n      payload: newEvent\n    }\n}\n\n\nexport const addEventApi = (values) => async dispatch =>{\n    const result = await event.post(\"/\", {\n         title: values.title,\n         start: values.start,\n         end: values.end,\n         describe: values.describe\n       })\n       .then(res=>{\n        \n        if(res && res.data){\n            console.log(\"event from the api going to the reducer: \", res.data)\n            dispatch(addEvent(res.data)) \n            dispatch(removeError())\n            \n            return  \"success\";\n        }\n       })\n       .catch(res=>{\n        console.log(\"catch response, \", res)\n        if(res.response.data){\n            \n            console.log(res.response.data)\n            dispatch(addError(res.response.data));\n        }\n    })\n       \n}\n\n\nconst updateEvent = (updatedEvent)=>{\n    return{\n      type: \"UPDATE_EVENT\",\n      payload: updatedEvent\n    }\n}\n\n\nexport const updateEventApi = (values, id) => async dispatch =>{\n    try{\n        const result = await event.put(`/${id}/update`, {\n            title: values.title,\n            start: values.start,\n            end: values.end,\n            describe: values.describe\n          })\n         console.log(result)\n          const response = result.data;\n          dispatch(removeError())\n          return \"response was successful\";\n    }catch(err){\n        console.log(err)\n        dispatch(addError(err.response.data));\n    }\n \n}"],"mappings":"AACA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAO,MAAMC,SAAS,GAAIL,KAAD,IAAS;EAC9BM,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDP,KAAhD;EACA,OAAM;IACFQ,IAAI,EAAE,YADJ;IAEFC,OAAO,EAAET;EAFP,CAAN;AAIH,CANM;AAQP,OAAO,MAAMU,UAAU,GAAIC,MAAD,IAAU;EAEhC,OAAM;IACFH,IAAI,EAAE,aADJ;IAEFC,OAAO,EAAEE;EAFP,CAAN;AAIH,CANM;AAQP,OAAO,MAAMC,YAAY,GAAGC,EAAE,IAAI,MAAMC,QAAN,IAAkB;EAEhD;EACA;EACA,MAAMC,MAAM,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAW,IAAGH,EAAG,OAAjB,CAArB;;EAEA,IAAG;IACC,MAAM;MAACI,KAAD;MAAQC,GAAR;MAAaC,KAAb;MAAoBC,GAApB;MAAyBC;IAAzB,IAAqC,MAAMN,MAAM,CAACO,IAAxD;IACA,MAAMC,cAAc,GAAG;MACnBN,KADmB;MAEnBI,QAFmB;MAGnBR,EAAE,EAAEK,GAHe;MAInBC,KAAK,EAAElB,MAAM,CAACkB,KAAD,CAAN,CAAcK,MAAd,CAAqB,kBAArB,CAJY;MAKnBJ,GAAG,EAAEnB,MAAM,CAACmB,GAAD,CAAN,CAAYI,MAAZ,CAAmB,kBAAnB;IALc,CAAvB;IAOA,MAAMV,QAAQ,CAACT,SAAS,CAACkB,cAAD,CAAV,CAAd;EACH,CAVD,CAUC,OAAME,GAAN,EAAU;IACN,MAAMC,KAAK,GAAE,MAAMD,GAAG,CAACH,IAAJ,CAASK,OAA5B;IACA,OAAOD,KAAP;EACJ;AACJ,CApBM;AAsBP,OAAO,MAAME,aAAa,GAAG,MAAM,MAAMd,QAAN,IAAkB;EAChDR,OAAO,CAACC,GAAR,CAAY,0BAAZ,EADgD,CAEjD;EACA;;EACA,MAAMQ,MAAM,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAU,GAAV,CAArB;;EAEA,IAAG;IACC,MAAMa,cAAc,GAAG,MAAMd,MAAM,CAACO,IAAP,CAAYQ,GAAZ,CAAgB9B,KAAK,IAAE;MAChD,OAAM;QACJiB,KAAK,EAAEjB,KAAK,CAACiB,KADT;QAEJE,KAAK,EAAE,IAAIY,IAAJ,CAAS/B,KAAK,CAACmB,KAAf,CAFH;QAGJC,GAAG,EAAE,IAAIW,IAAJ,CAAS/B,KAAK,CAACoB,GAAf,CAHD;QAIJP,EAAE,EAAEb,KAAK,CAACkB,GAJN;QAKJG,QAAQ,EAAErB,KAAK,CAACqB;MALZ,CAAN;IAOD,CAR0B,CAA7B;IASA,MAAMP,QAAQ,CAACJ,UAAU,CAACmB,cAAD,CAAX,CAAd;EACH,CAXD,CAWC,OAAMJ,GAAN,EAAU;IACN,MAAMC,KAAK,GAAE,MAAMD,GAAG,CAACH,IAAJ,CAASK,OAA5B;IACA,OAAOD,KAAP;EACJ;AACJ,CArBM;AAwBP,OAAO,MAAMM,WAAW,GAAInB,EAAD,IAAM;EAC9B,OAAO;IACHL,IAAI,EAAE,cADH;IAEHC,OAAO,EAAEI;EAFN,CAAP;AAIF,CALM;AAOP,OAAO,MAAMoB,cAAc,GAAIpB,EAAD,IAAS,MAAMC,QAAN,IAAiB;EACpD,MAAMC,MAAM,GAAG,MAAMf,KAAK,CAACkC,MAAN,CAAc,IAAGrB,EAAG,SAApB,CAArB;;EAEA,IAAI;IACA,MAAMsB,OAAO,GAAG,MAAMpB,MAAM,CAACO,IAA7B;IACA,MAAMR,QAAQ,CAACkB,WAAW,CAACnB,EAAD,CAAZ,CAAd;IACA,OAAO;MAACsB;IAAD,CAAP;EACH,CAJD,CAIC,OAAMV,GAAN,EAAU;IACP,MAAME,OAAO,GAAG,MAAMZ,MAAM,CAACO,IAAP,CAAYK,OAAlC;IACArB,OAAO,CAACC,GAAR,CAAYoB,OAAZ;IACA,OAAO;MAACA;IAAD,CAAP;EACH;AACJ,CAZM;;AAgBP,MAAMS,QAAQ,GAAIC,QAAD,IAAY;EACzB,OAAM;IACJ7B,IAAI,EAAE,WADF;IAEJC,OAAO,EAAE4B;EAFL,CAAN;AAIH,CALD;;AAQA,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAAY,MAAMzB,QAAN,IAAiB;EACpD,MAAMC,MAAM,GAAG,MAAMf,KAAK,CAACwC,IAAN,CAAW,GAAX,EAAgB;IAChCvB,KAAK,EAAEsB,MAAM,CAACtB,KADkB;IAEhCE,KAAK,EAAEoB,MAAM,CAACpB,KAFkB;IAGhCC,GAAG,EAAEmB,MAAM,CAACnB,GAHoB;IAIhCC,QAAQ,EAAEkB,MAAM,CAAClB;EAJe,CAAhB,EAMjBoB,IANiB,CAMZC,GAAG,IAAE;IAEV,IAAGA,GAAG,IAAIA,GAAG,CAACpB,IAAd,EAAmB;MACfhB,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDmC,GAAG,CAACpB,IAA7D;MACAR,QAAQ,CAACsB,QAAQ,CAACM,GAAG,CAACpB,IAAL,CAAT,CAAR;MACAR,QAAQ,CAACX,WAAW,EAAZ,CAAR;MAEA,OAAQ,SAAR;IACH;EACD,CAfiB,EAgBjBwC,KAhBiB,CAgBXD,GAAG,IAAE;IACXpC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCmC,GAAhC;;IACA,IAAGA,GAAG,CAACE,QAAJ,CAAatB,IAAhB,EAAqB;MAEjBhB,OAAO,CAACC,GAAR,CAAYmC,GAAG,CAACE,QAAJ,CAAatB,IAAzB;MACAR,QAAQ,CAACZ,QAAQ,CAACwC,GAAG,CAACE,QAAJ,CAAatB,IAAd,CAAT,CAAR;IACH;EACJ,CAvBoB,CAArB;AAyBH,CA1BM;;AA6BP,MAAMuB,WAAW,GAAIC,YAAD,IAAgB;EAChC,OAAM;IACJtC,IAAI,EAAE,cADF;IAEJC,OAAO,EAAEqC;EAFL,CAAN;AAIH,CALD;;AAQA,OAAO,MAAMC,cAAc,GAAG,CAACR,MAAD,EAAS1B,EAAT,KAAgB,MAAMC,QAAN,IAAiB;EAC3D,IAAG;IACC,MAAMC,MAAM,GAAG,MAAMf,KAAK,CAACgD,GAAN,CAAW,IAAGnC,EAAG,SAAjB,EAA2B;MAC5CI,KAAK,EAAEsB,MAAM,CAACtB,KAD8B;MAE5CE,KAAK,EAAEoB,MAAM,CAACpB,KAF8B;MAG5CC,GAAG,EAAEmB,MAAM,CAACnB,GAHgC;MAI5CC,QAAQ,EAAEkB,MAAM,CAAClB;IAJ2B,CAA3B,CAArB;IAMCf,OAAO,CAACC,GAAR,CAAYQ,MAAZ;IACC,MAAM6B,QAAQ,GAAG7B,MAAM,CAACO,IAAxB;IACAR,QAAQ,CAACX,WAAW,EAAZ,CAAR;IACA,OAAO,yBAAP;EACL,CAXD,CAWC,OAAMsB,GAAN,EAAU;IACPnB,OAAO,CAACC,GAAR,CAAYkB,GAAZ;IACAX,QAAQ,CAACZ,QAAQ,CAACuB,GAAG,CAACmB,QAAJ,CAAatB,IAAd,CAAT,CAAR;EACH;AAEJ,CAjBM"},"metadata":{},"sourceType":"module"}